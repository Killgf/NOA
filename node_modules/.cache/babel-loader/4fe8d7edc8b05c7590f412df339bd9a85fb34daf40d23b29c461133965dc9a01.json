{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '..//assets/img/logo_one-1.svg';\nconst _hoisted_1 = {\n  class: \"wrapper\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"container\\\"><header class=\\\"header\\\"><div class=\\\"header__logo\\\"><a href=\\\"/home\\\"><img src=\\\"\" + _imports_0 + \"\\\" alt=\\\"\\\"></a></div><div class=\\\"header__title\\\">BEST OF THE BEST</div><button class=\\\"header__btn-1\\\">Click</button></header><h1 class=\\\"countdown-title\\\">Countdown Clock</h1><div id=\\\"countdown\\\" class=\\\"countdown\\\"><div class=\\\"countdown-number\\\"><span class=\\\"days countdown-time\\\"></span><span class=\\\"countdown-text\\\">Days</span></div><div class=\\\"countdown-number\\\"><span class=\\\"hours countdown-time\\\"></span><span class=\\\"countdown-text\\\">Hours</span></div><div class=\\\"countdown-number\\\"><span class=\\\"minutes countdown-time\\\"></span><span class=\\\"countdown-text\\\">Minutes</span></div><div class=\\\"countdown-number\\\"><span class=\\\"seconds countdown-time\\\"></span><span class=\\\"countdown-text\\\">Seconds</span></div></div></div>\", 1);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"names":["_imports_0","class","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["C:\\Killgf\\Hogwards\\best-team\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n    <div class=\"wrapper\">\n        <div class=\"container\">\n            <header class=\"header\">\n                <div class=\"header__logo\">\n                    <a href=\"/home\"><img src=\"..//assets/img/logo_one-1.svg\" alt=\"\"></a>\n                </div>\n                <div class=\"header__title\">BEST OF THE BEST</div>\n                <button class=\"header__btn-1\">Click</button>\n            </header>\n            <h1 class=\"countdown-title\">Countdown Clock</h1>\n            <div id=\"countdown\" class=\"countdown\">\n                <div class=\"countdown-number\">\n                    <span class=\"days countdown-time\"></span>\n                    <span class=\"countdown-text\">Days</span>\n                </div>\n                <div class=\"countdown-number\">\n                    <span class=\"hours countdown-time\"></span>\n                    <span class=\"countdown-text\">Hours</span>\n                </div>\n                <div class=\"countdown-number\">\n                    <span class=\"minutes countdown-time\"></span>\n                    <span class=\"countdown-text\">Minutes</span>\n                </div>\n                <div class=\"countdown-number\">\n                    <span class=\"seconds countdown-time\"></span>\n                    <span class=\"countdown-text\">Seconds</span>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'HelloWorld',\n        props: {\n            msg: String\n        },\n        data() {\n            return {\n                time: {\n                    days: 0,\n                    hours: 0,\n                    minutes: 0,\n                    seconds: 0\n                }\n            };\n        },\n        methods: {\n            getTimeRemaining(endtime) {\n                const t = Date.parse(endtime) - Date.now();\n                const seconds = Math.floor((t / 1000) % 60);\n                const minutes = Math.floor((t / 1000 / 60) % 60);\n                const hours = Math.floor((t / (1000 * 60 * 60)) % 24);\n                const days = Math.floor(t / (1000 * 60 * 60 * 24));\n                return {\n                    total: t,\n                    days: days,\n                    hours: hours,\n                    minutes: minutes,\n                    seconds: seconds\n                };\n            },\n            updateClock(endtime) {\n                const t = this.getTimeRemaining(endtime);\n\n                this.time.days = t.days;\n                this.time.hours = t.hours;\n                this.time.minutes = t.minutes;\n                this.time.seconds = t.seconds;\n\n                if (t.total <= 0) {\n                    clearInterval(this.timeinterval);\n                }\n            },\n            initializeClock(id, endtime) {\n                this.updateClock(endtime);\n                this.timeinterval = setInterval(() => this.updateClock(endtime), 1000);\n            }\n        },\n        mounted() {\n            const deadline = new Date(Date.now() + 15 * 24 * 60 * 60 * 1000); // for endless timer\n            this.initializeClock('countdown', deadline);\n        },\n        beforeDestroy() {\n            clearInterval(this.timeinterval);\n        }\n    };\n</script>\n"],"mappings":";OAKyCA,UAAmC;;EAJnEC,KAAK,EAAC;AAAS;;oBAChBC,UA2BM,C;;uBA5BVC,mBAAA,CA6BM,OA7BNC,UA6BM,EAAAC,UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}